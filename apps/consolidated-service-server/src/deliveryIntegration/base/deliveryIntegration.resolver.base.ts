/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DeliveryIntegration } from "./DeliveryIntegration";
import { DeliveryIntegrationCountArgs } from "./DeliveryIntegrationCountArgs";
import { DeliveryIntegrationFindManyArgs } from "./DeliveryIntegrationFindManyArgs";
import { DeliveryIntegrationFindUniqueArgs } from "./DeliveryIntegrationFindUniqueArgs";
import { CreateDeliveryIntegrationArgs } from "./CreateDeliveryIntegrationArgs";
import { UpdateDeliveryIntegrationArgs } from "./UpdateDeliveryIntegrationArgs";
import { DeleteDeliveryIntegrationArgs } from "./DeleteDeliveryIntegrationArgs";
import { Reservation } from "../../reservation/base/Reservation";
import { DeliveryIntegrationService } from "../deliveryIntegration.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DeliveryIntegration)
export class DeliveryIntegrationResolverBase {
  constructor(
    protected readonly service: DeliveryIntegrationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DeliveryIntegration",
    action: "read",
    possession: "any",
  })
  async _deliveryIntegrationsMeta(
    @graphql.Args() args: DeliveryIntegrationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DeliveryIntegration])
  @nestAccessControl.UseRoles({
    resource: "DeliveryIntegration",
    action: "read",
    possession: "any",
  })
  async deliveryIntegrations(
    @graphql.Args() args: DeliveryIntegrationFindManyArgs
  ): Promise<DeliveryIntegration[]> {
    return this.service.deliveryIntegrations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DeliveryIntegration, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DeliveryIntegration",
    action: "read",
    possession: "own",
  })
  async deliveryIntegration(
    @graphql.Args() args: DeliveryIntegrationFindUniqueArgs
  ): Promise<DeliveryIntegration | null> {
    const result = await this.service.deliveryIntegration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeliveryIntegration)
  @nestAccessControl.UseRoles({
    resource: "DeliveryIntegration",
    action: "create",
    possession: "any",
  })
  async createDeliveryIntegration(
    @graphql.Args() args: CreateDeliveryIntegrationArgs
  ): Promise<DeliveryIntegration> {
    return await this.service.createDeliveryIntegration({
      ...args,
      data: {
        ...args.data,

        reservation: args.data.reservation
          ? {
              connect: args.data.reservation,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeliveryIntegration)
  @nestAccessControl.UseRoles({
    resource: "DeliveryIntegration",
    action: "update",
    possession: "any",
  })
  async updateDeliveryIntegration(
    @graphql.Args() args: UpdateDeliveryIntegrationArgs
  ): Promise<DeliveryIntegration | null> {
    try {
      return await this.service.updateDeliveryIntegration({
        ...args,
        data: {
          ...args.data,

          reservation: args.data.reservation
            ? {
                connect: args.data.reservation,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliveryIntegration)
  @nestAccessControl.UseRoles({
    resource: "DeliveryIntegration",
    action: "delete",
    possession: "any",
  })
  async deleteDeliveryIntegration(
    @graphql.Args() args: DeleteDeliveryIntegrationArgs
  ): Promise<DeliveryIntegration | null> {
    try {
      return await this.service.deleteDeliveryIntegration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Reservation, {
    nullable: true,
    name: "reservation",
  })
  @nestAccessControl.UseRoles({
    resource: "Reservation",
    action: "read",
    possession: "any",
  })
  async getReservation(
    @graphql.Parent() parent: DeliveryIntegration
  ): Promise<Reservation | null> {
    const result = await this.service.getReservation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
