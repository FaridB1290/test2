/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DeliveryIntegration as PrismaDeliveryIntegration,
  Reservation as PrismaReservation,
} from "@prisma/client";

export class DeliveryIntegrationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeliveryIntegrationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.deliveryIntegration.count(args);
  }

  async deliveryIntegrations<T extends Prisma.DeliveryIntegrationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeliveryIntegrationFindManyArgs>
  ): Promise<PrismaDeliveryIntegration[]> {
    return this.prisma.deliveryIntegration.findMany<Prisma.DeliveryIntegrationFindManyArgs>(
      args
    );
  }
  async deliveryIntegration<T extends Prisma.DeliveryIntegrationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DeliveryIntegrationFindUniqueArgs>
  ): Promise<PrismaDeliveryIntegration | null> {
    return this.prisma.deliveryIntegration.findUnique(args);
  }
  async createDeliveryIntegration<
    T extends Prisma.DeliveryIntegrationCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DeliveryIntegrationCreateArgs>
  ): Promise<PrismaDeliveryIntegration> {
    return this.prisma.deliveryIntegration.create<T>(args);
  }
  async updateDeliveryIntegration<
    T extends Prisma.DeliveryIntegrationUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DeliveryIntegrationUpdateArgs>
  ): Promise<PrismaDeliveryIntegration> {
    return this.prisma.deliveryIntegration.update<T>(args);
  }
  async deleteDeliveryIntegration<
    T extends Prisma.DeliveryIntegrationDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.DeliveryIntegrationDeleteArgs>
  ): Promise<PrismaDeliveryIntegration> {
    return this.prisma.deliveryIntegration.delete(args);
  }

  async getReservation(parentId: string): Promise<PrismaReservation | null> {
    return this.prisma.deliveryIntegration
      .findUnique({
        where: { id: parentId },
      })
      .reservation();
  }
}
