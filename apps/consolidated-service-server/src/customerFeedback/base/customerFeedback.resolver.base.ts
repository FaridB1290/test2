/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CustomerFeedback } from "./CustomerFeedback";
import { CustomerFeedbackCountArgs } from "./CustomerFeedbackCountArgs";
import { CustomerFeedbackFindManyArgs } from "./CustomerFeedbackFindManyArgs";
import { CustomerFeedbackFindUniqueArgs } from "./CustomerFeedbackFindUniqueArgs";
import { CreateCustomerFeedbackArgs } from "./CreateCustomerFeedbackArgs";
import { UpdateCustomerFeedbackArgs } from "./UpdateCustomerFeedbackArgs";
import { DeleteCustomerFeedbackArgs } from "./DeleteCustomerFeedbackArgs";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { RestaurantManagement } from "../../restaurantManagement/base/RestaurantManagement";
import { CustomerFeedbackService } from "../customerFeedback.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CustomerFeedback)
export class CustomerFeedbackResolverBase {
  constructor(
    protected readonly service: CustomerFeedbackService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CustomerFeedback",
    action: "read",
    possession: "any",
  })
  async _customerFeedbacksMeta(
    @graphql.Args() args: CustomerFeedbackCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CustomerFeedback])
  @nestAccessControl.UseRoles({
    resource: "CustomerFeedback",
    action: "read",
    possession: "any",
  })
  async customerFeedbacks(
    @graphql.Args() args: CustomerFeedbackFindManyArgs
  ): Promise<CustomerFeedback[]> {
    return this.service.customerFeedbacks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CustomerFeedback, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CustomerFeedback",
    action: "read",
    possession: "own",
  })
  async customerFeedback(
    @graphql.Args() args: CustomerFeedbackFindUniqueArgs
  ): Promise<CustomerFeedback | null> {
    const result = await this.service.customerFeedback(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerFeedback)
  @nestAccessControl.UseRoles({
    resource: "CustomerFeedback",
    action: "create",
    possession: "any",
  })
  async createCustomerFeedback(
    @graphql.Args() args: CreateCustomerFeedbackArgs
  ): Promise<CustomerFeedback> {
    return await this.service.createCustomerFeedback({
      ...args,
      data: {
        ...args.data,

        restaurantManagement: args.data.restaurantManagement
          ? {
              connect: args.data.restaurantManagement,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerFeedback)
  @nestAccessControl.UseRoles({
    resource: "CustomerFeedback",
    action: "update",
    possession: "any",
  })
  async updateCustomerFeedback(
    @graphql.Args() args: UpdateCustomerFeedbackArgs
  ): Promise<CustomerFeedback | null> {
    try {
      return await this.service.updateCustomerFeedback({
        ...args,
        data: {
          ...args.data,

          restaurantManagement: args.data.restaurantManagement
            ? {
                connect: args.data.restaurantManagement,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerFeedback)
  @nestAccessControl.UseRoles({
    resource: "CustomerFeedback",
    action: "delete",
    possession: "any",
  })
  async deleteCustomerFeedback(
    @graphql.Args() args: DeleteCustomerFeedbackArgs
  ): Promise<CustomerFeedback | null> {
    try {
      return await this.service.deleteCustomerFeedback(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Notification], { name: "notifications" })
  @nestAccessControl.UseRoles({
    resource: "Notification",
    action: "read",
    possession: "any",
  })
  async findNotifications(
    @graphql.Parent() parent: CustomerFeedback,
    @graphql.Args() args: NotificationFindManyArgs
  ): Promise<Notification[]> {
    const results = await this.service.findNotifications(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => RestaurantManagement, {
    nullable: true,
    name: "restaurantManagement",
  })
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "read",
    possession: "any",
  })
  async getRestaurantManagement(
    @graphql.Parent() parent: CustomerFeedback
  ): Promise<RestaurantManagement | null> {
    const result = await this.service.getRestaurantManagement(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
