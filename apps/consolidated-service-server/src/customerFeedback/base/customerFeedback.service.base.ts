/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CustomerFeedback as PrismaCustomerFeedback,
  Notification as PrismaNotification,
  RestaurantManagement as PrismaRestaurantManagement,
} from "@prisma/client";

export class CustomerFeedbackServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerFeedbackCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerFeedback.count(args);
  }

  async customerFeedbacks<T extends Prisma.CustomerFeedbackFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerFeedbackFindManyArgs>
  ): Promise<PrismaCustomerFeedback[]> {
    return this.prisma.customerFeedback.findMany<Prisma.CustomerFeedbackFindManyArgs>(
      args
    );
  }
  async customerFeedback<T extends Prisma.CustomerFeedbackFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerFeedbackFindUniqueArgs>
  ): Promise<PrismaCustomerFeedback | null> {
    return this.prisma.customerFeedback.findUnique(args);
  }
  async createCustomerFeedback<T extends Prisma.CustomerFeedbackCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerFeedbackCreateArgs>
  ): Promise<PrismaCustomerFeedback> {
    return this.prisma.customerFeedback.create<T>(args);
  }
  async updateCustomerFeedback<T extends Prisma.CustomerFeedbackUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerFeedbackUpdateArgs>
  ): Promise<PrismaCustomerFeedback> {
    return this.prisma.customerFeedback.update<T>(args);
  }
  async deleteCustomerFeedback<T extends Prisma.CustomerFeedbackDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerFeedbackDeleteArgs>
  ): Promise<PrismaCustomerFeedback> {
    return this.prisma.customerFeedback.delete(args);
  }

  async findNotifications(
    parentId: string,
    args: Prisma.NotificationFindManyArgs
  ): Promise<PrismaNotification[]> {
    return this.prisma.customerFeedback
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notifications(args);
  }

  async getRestaurantManagement(
    parentId: string
  ): Promise<PrismaRestaurantManagement | null> {
    return this.prisma.customerFeedback
      .findUnique({
        where: { id: parentId },
      })
      .restaurantManagement();
  }
}
