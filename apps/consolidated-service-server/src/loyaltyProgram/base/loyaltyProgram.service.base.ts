/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LoyaltyProgram as PrismaLoyaltyProgram,
  RestaurantManagement as PrismaRestaurantManagement,
} from "@prisma/client";

export class LoyaltyProgramServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LoyaltyProgramCountArgs, "select">
  ): Promise<number> {
    return this.prisma.loyaltyProgram.count(args);
  }

  async loyaltyPrograms<T extends Prisma.LoyaltyProgramFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoyaltyProgramFindManyArgs>
  ): Promise<PrismaLoyaltyProgram[]> {
    return this.prisma.loyaltyProgram.findMany<Prisma.LoyaltyProgramFindManyArgs>(
      args
    );
  }
  async loyaltyProgram<T extends Prisma.LoyaltyProgramFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoyaltyProgramFindUniqueArgs>
  ): Promise<PrismaLoyaltyProgram | null> {
    return this.prisma.loyaltyProgram.findUnique(args);
  }
  async createLoyaltyProgram<T extends Prisma.LoyaltyProgramCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoyaltyProgramCreateArgs>
  ): Promise<PrismaLoyaltyProgram> {
    return this.prisma.loyaltyProgram.create<T>(args);
  }
  async updateLoyaltyProgram<T extends Prisma.LoyaltyProgramUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoyaltyProgramUpdateArgs>
  ): Promise<PrismaLoyaltyProgram> {
    return this.prisma.loyaltyProgram.update<T>(args);
  }
  async deleteLoyaltyProgram<T extends Prisma.LoyaltyProgramDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LoyaltyProgramDeleteArgs>
  ): Promise<PrismaLoyaltyProgram> {
    return this.prisma.loyaltyProgram.delete(args);
  }

  async getRestaurantManagement(
    parentId: string
  ): Promise<PrismaRestaurantManagement | null> {
    return this.prisma.loyaltyProgram
      .findUnique({
        where: { id: parentId },
      })
      .restaurantManagement();
  }
}
