/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { RestaurantManagementService } from "../restaurantManagement.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RestaurantManagementCreateInput } from "./RestaurantManagementCreateInput";
import { RestaurantManagement } from "./RestaurantManagement";
import { RestaurantManagementFindManyArgs } from "./RestaurantManagementFindManyArgs";
import { RestaurantManagementWhereUniqueInput } from "./RestaurantManagementWhereUniqueInput";
import { RestaurantManagementUpdateInput } from "./RestaurantManagementUpdateInput";
import { CustomerFeedbackFindManyArgs } from "../../customerFeedback/base/CustomerFeedbackFindManyArgs";
import { CustomerFeedback } from "../../customerFeedback/base/CustomerFeedback";
import { CustomerFeedbackWhereUniqueInput } from "../../customerFeedback/base/CustomerFeedbackWhereUniqueInput";
import { LoyaltyProgramFindManyArgs } from "../../loyaltyProgram/base/LoyaltyProgramFindManyArgs";
import { LoyaltyProgram } from "../../loyaltyProgram/base/LoyaltyProgram";
import { LoyaltyProgramWhereUniqueInput } from "../../loyaltyProgram/base/LoyaltyProgramWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class RestaurantManagementControllerBase {
  constructor(
    protected readonly service: RestaurantManagementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RestaurantManagement })
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createRestaurantManagement(
    @common.Body() data: RestaurantManagementCreateInput
  ): Promise<RestaurantManagement> {
    return await this.service.createRestaurantManagement({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [RestaurantManagement] })
  @ApiNestedQuery(RestaurantManagementFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async restaurantManagements(
    @common.Req() request: Request
  ): Promise<RestaurantManagement[]> {
    const args = plainToClass(RestaurantManagementFindManyArgs, request.query);
    return this.service.restaurantManagements({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RestaurantManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async restaurantManagement(
    @common.Param() params: RestaurantManagementWhereUniqueInput
  ): Promise<RestaurantManagement | null> {
    const result = await this.service.restaurantManagement({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RestaurantManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateRestaurantManagement(
    @common.Param() params: RestaurantManagementWhereUniqueInput,
    @common.Body() data: RestaurantManagementUpdateInput
  ): Promise<RestaurantManagement | null> {
    try {
      return await this.service.updateRestaurantManagement({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RestaurantManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteRestaurantManagement(
    @common.Param() params: RestaurantManagementWhereUniqueInput
  ): Promise<RestaurantManagement | null> {
    try {
      return await this.service.deleteRestaurantManagement({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/customerFeedbacks")
  @ApiNestedQuery(CustomerFeedbackFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CustomerFeedback",
    action: "read",
    possession: "any",
  })
  async findCustomerFeedbacks(
    @common.Req() request: Request,
    @common.Param() params: RestaurantManagementWhereUniqueInput
  ): Promise<CustomerFeedback[]> {
    const query = plainToClass(CustomerFeedbackFindManyArgs, request.query);
    const results = await this.service.findCustomerFeedbacks(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        restaurantManagement: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customerFeedbacks")
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "update",
    possession: "any",
  })
  async connectCustomerFeedbacks(
    @common.Param() params: RestaurantManagementWhereUniqueInput,
    @common.Body() body: CustomerFeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerFeedbacks: {
        connect: body,
      },
    };
    await this.service.updateRestaurantManagement({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customerFeedbacks")
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "update",
    possession: "any",
  })
  async updateCustomerFeedbacks(
    @common.Param() params: RestaurantManagementWhereUniqueInput,
    @common.Body() body: CustomerFeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerFeedbacks: {
        set: body,
      },
    };
    await this.service.updateRestaurantManagement({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customerFeedbacks")
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "update",
    possession: "any",
  })
  async disconnectCustomerFeedbacks(
    @common.Param() params: RestaurantManagementWhereUniqueInput,
    @common.Body() body: CustomerFeedbackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerFeedbacks: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurantManagement({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/loyaltyPrograms")
  @ApiNestedQuery(LoyaltyProgramFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LoyaltyProgram",
    action: "read",
    possession: "any",
  })
  async findLoyaltyPrograms(
    @common.Req() request: Request,
    @common.Param() params: RestaurantManagementWhereUniqueInput
  ): Promise<LoyaltyProgram[]> {
    const query = plainToClass(LoyaltyProgramFindManyArgs, request.query);
    const results = await this.service.findLoyaltyPrograms(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        restaurantManagement: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/loyaltyPrograms")
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "update",
    possession: "any",
  })
  async connectLoyaltyPrograms(
    @common.Param() params: RestaurantManagementWhereUniqueInput,
    @common.Body() body: LoyaltyProgramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loyaltyPrograms: {
        connect: body,
      },
    };
    await this.service.updateRestaurantManagement({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/loyaltyPrograms")
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "update",
    possession: "any",
  })
  async updateLoyaltyPrograms(
    @common.Param() params: RestaurantManagementWhereUniqueInput,
    @common.Body() body: LoyaltyProgramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loyaltyPrograms: {
        set: body,
      },
    };
    await this.service.updateRestaurantManagement({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/loyaltyPrograms")
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "update",
    possession: "any",
  })
  async disconnectLoyaltyPrograms(
    @common.Param() params: RestaurantManagementWhereUniqueInput,
    @common.Body() body: LoyaltyProgramWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      loyaltyPrograms: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurantManagement({
      where: params,
      data,
      select: { id: true },
    });
  }
}
