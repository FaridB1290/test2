/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RestaurantManagement } from "./RestaurantManagement";
import { RestaurantManagementCountArgs } from "./RestaurantManagementCountArgs";
import { RestaurantManagementFindManyArgs } from "./RestaurantManagementFindManyArgs";
import { RestaurantManagementFindUniqueArgs } from "./RestaurantManagementFindUniqueArgs";
import { CreateRestaurantManagementArgs } from "./CreateRestaurantManagementArgs";
import { UpdateRestaurantManagementArgs } from "./UpdateRestaurantManagementArgs";
import { DeleteRestaurantManagementArgs } from "./DeleteRestaurantManagementArgs";
import { CustomerFeedbackFindManyArgs } from "../../customerFeedback/base/CustomerFeedbackFindManyArgs";
import { CustomerFeedback } from "../../customerFeedback/base/CustomerFeedback";
import { LoyaltyProgramFindManyArgs } from "../../loyaltyProgram/base/LoyaltyProgramFindManyArgs";
import { LoyaltyProgram } from "../../loyaltyProgram/base/LoyaltyProgram";
import { RestaurantManagementService } from "../restaurantManagement.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RestaurantManagement)
export class RestaurantManagementResolverBase {
  constructor(
    protected readonly service: RestaurantManagementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "read",
    possession: "any",
  })
  async _restaurantManagementsMeta(
    @graphql.Args() args: RestaurantManagementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RestaurantManagement])
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "read",
    possession: "any",
  })
  async restaurantManagements(
    @graphql.Args() args: RestaurantManagementFindManyArgs
  ): Promise<RestaurantManagement[]> {
    return this.service.restaurantManagements(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RestaurantManagement, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "read",
    possession: "own",
  })
  async restaurantManagement(
    @graphql.Args() args: RestaurantManagementFindUniqueArgs
  ): Promise<RestaurantManagement | null> {
    const result = await this.service.restaurantManagement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantManagement)
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "create",
    possession: "any",
  })
  async createRestaurantManagement(
    @graphql.Args() args: CreateRestaurantManagementArgs
  ): Promise<RestaurantManagement> {
    return await this.service.createRestaurantManagement({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantManagement)
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "update",
    possession: "any",
  })
  async updateRestaurantManagement(
    @graphql.Args() args: UpdateRestaurantManagementArgs
  ): Promise<RestaurantManagement | null> {
    try {
      return await this.service.updateRestaurantManagement({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RestaurantManagement)
  @nestAccessControl.UseRoles({
    resource: "RestaurantManagement",
    action: "delete",
    possession: "any",
  })
  async deleteRestaurantManagement(
    @graphql.Args() args: DeleteRestaurantManagementArgs
  ): Promise<RestaurantManagement | null> {
    try {
      return await this.service.deleteRestaurantManagement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CustomerFeedback], { name: "customerFeedbacks" })
  @nestAccessControl.UseRoles({
    resource: "CustomerFeedback",
    action: "read",
    possession: "any",
  })
  async findCustomerFeedbacks(
    @graphql.Parent() parent: RestaurantManagement,
    @graphql.Args() args: CustomerFeedbackFindManyArgs
  ): Promise<CustomerFeedback[]> {
    const results = await this.service.findCustomerFeedbacks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [LoyaltyProgram], { name: "loyaltyPrograms" })
  @nestAccessControl.UseRoles({
    resource: "LoyaltyProgram",
    action: "read",
    possession: "any",
  })
  async findLoyaltyPrograms(
    @graphql.Parent() parent: RestaurantManagement,
    @graphql.Args() args: LoyaltyProgramFindManyArgs
  ): Promise<LoyaltyProgram[]> {
    const results = await this.service.findLoyaltyPrograms(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
