/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RestaurantManagement as PrismaRestaurantManagement,
  CustomerFeedback as PrismaCustomerFeedback,
  LoyaltyProgram as PrismaLoyaltyProgram,
} from "@prisma/client";

export class RestaurantManagementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RestaurantManagementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.restaurantManagement.count(args);
  }

  async restaurantManagements<
    T extends Prisma.RestaurantManagementFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RestaurantManagementFindManyArgs>
  ): Promise<PrismaRestaurantManagement[]> {
    return this.prisma.restaurantManagement.findMany<Prisma.RestaurantManagementFindManyArgs>(
      args
    );
  }
  async restaurantManagement<
    T extends Prisma.RestaurantManagementFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RestaurantManagementFindUniqueArgs>
  ): Promise<PrismaRestaurantManagement | null> {
    return this.prisma.restaurantManagement.findUnique(args);
  }
  async createRestaurantManagement<
    T extends Prisma.RestaurantManagementCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RestaurantManagementCreateArgs>
  ): Promise<PrismaRestaurantManagement> {
    return this.prisma.restaurantManagement.create<T>(args);
  }
  async updateRestaurantManagement<
    T extends Prisma.RestaurantManagementUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RestaurantManagementUpdateArgs>
  ): Promise<PrismaRestaurantManagement> {
    return this.prisma.restaurantManagement.update<T>(args);
  }
  async deleteRestaurantManagement<
    T extends Prisma.RestaurantManagementDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.RestaurantManagementDeleteArgs>
  ): Promise<PrismaRestaurantManagement> {
    return this.prisma.restaurantManagement.delete(args);
  }

  async findCustomerFeedbacks(
    parentId: string,
    args: Prisma.CustomerFeedbackFindManyArgs
  ): Promise<PrismaCustomerFeedback[]> {
    return this.prisma.restaurantManagement
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customerFeedbacks(args);
  }

  async findLoyaltyPrograms(
    parentId: string,
    args: Prisma.LoyaltyProgramFindManyArgs
  ): Promise<PrismaLoyaltyProgram[]> {
    return this.prisma.restaurantManagement
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .loyaltyPrograms(args);
  }
}
